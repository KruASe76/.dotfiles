#!/bin/python3

import argparse
import os
import shutil
from pathlib import Path


cwd = Path(__file__).parent
config_dir = Path(cwd, ".config")
local_bin_dir = Path(cwd, ".local/bin")
gnome_extensions_dir = Path(cwd, ".local/share/gnome-shell/extensions")
fonts_dir = Path(cwd, ".local/share/fonts")

parser = argparse.ArgumentParser(description="inject symlinks into user directory")
parser.add_argument("-e", "--extensions", "--ext", action="store_true", help="whether to sync GNOME extensions")
args = parser.parse_args()


def prepare_link(link_name: Path) -> None:
    link_name.parent.mkdir(exist_ok=True)

    if not link_name.exists():
        return
    
    if link_name.is_symlink() or link_name.is_file():
        os.remove(link_name)
    else:
        shutil.rmtree(link_name)


for path in cwd.iterdir():
    if path.name in ["install", ".git", ".config", ".local"]:
        continue

    link_name = Path(Path.home(), path.relative_to(cwd))
    prepare_link(link_name)
    os.symlink(path, link_name)

for config in config_dir.iterdir():
    link_name = Path(Path.home(), ".config", config.relative_to(config_dir))
    prepare_link(link_name)
    os.symlink(config, link_name)

for script_file in local_bin_dir.iterdir():
    link_name = Path(Path.home(), ".local/bin", script_file.relative_to(local_bin_dir))
    prepare_link(link_name)
    os.symlink(script_file, link_name)

link_name = Path(Path.home(), ".local/share/fonts")
prepare_link(link_name)
os.symlink(fonts_dir, link_name)

if args.extensions:
    link_name = Path(Path.home(), ".local/share/gnome-shell/extensions")
    prepare_link(link_name)
    os.symlink(gnome_extensions_dir, link_name)


print("Done")
